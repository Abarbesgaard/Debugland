{
  "README.html": {
    "href": "README.html",
    "title": "Setup | Debugland",
    "keywords": "In the dynamic world of software development, Debugland stands as a beacon, revolutionizing the debugging experience during runtime. Designed to bring clarity and readability to the often intricate process of troubleshooting, Debugland introduces a suite of features that seamlessly integrate into your development workflow. To learn how to set it up please follow the next seciton Setup download Debugland via nuget Manager Write the following at the beginning of your code: using Debugger = Debugland.Debugger; And you're good to go! The next section will show you how to use the methods that Debugland has. Documentaiton MethodInitiated and MethodTerminated The Initiation and termination method is crucial for starting every debug process when using Debugland. It plays a vital role in the overall layout in the debug window. Example: //start by making a method public void TestMethod() { //initiate the debugger with the name of this method Debugger.MethodInitiated(\"TestMethod\"); Method Logic ... //Terminate the debugger for this method Debugger.MethodTerminated(\"TestMethod\"); } debug output display [TestMethod] → initiated [/TestMethod] TimeInitiated and Timeterminated The purpose of this method is to track the time of a method //start by making a method with the debugger initiated and terminated public void TestMethod() { Debugger.MethodInitiated(\"TestMethod\"); // Initiate the time tracking, Debugger.TimeInitiated(\"TestMethod\"); Method Logic ... //Terminate the debugger for this method Debugger.TimeTerminated Debugger.MethodTerminated(\"TestMethod\"); } debug output display [TestMethod] → initiated ← Elapsed time for TestMethod: 15 milliseconds [/TestMethod] Message and MessageImportant This simple method is for writing a message in the debug window. Along with MessageImportant you can highten awareness along certain steps in your debugging //start by making a method with the debugger initiated and terminated public void TestMethod() { Debugger.MethodInitiated(\"TestMethod\"); // Write the message method anywhere in your methods., Debugger.Message(\"A message\"); Debugger.MessageImportant(\"An Important Message\"); Debugger.MethodTerminated(\"TestMethod\"); } debug output display [TestMethod] → initiated ! A message ‼ An Important Message [/TestMethod] Tracking SQL Now this part contains multiple methods that works well together. But you can use them as you see fit. If you want to track sql stuff the following methods will enable this: SQLCommandInitiated SQLCommandTerminated ReaderInitiated ReaderTerminated SQLConnectionInitiated SQLConnectionTerminated When they're all combined it will look like this: //start by making a method with the debugger initiated and terminated public void TestMethod() { Debugger.MethodInitiated(\"TestMethod\"); // Write the message method anywhere in your methods., Debugger.SQLConnectionInitiated(); Debugger.SQLCommandInitiated(\"A specific command\"); Debugger.ReaderInitiated(); Debugger.ReaderTerminating(); Debugger.SQLCommandTerminating(); Debugger.SQLConnectionTerminating(); } debug output display [TestMethod] →initialized ┌SQL Connection Initiated ┌SQL Command: A specific command |Reader initialized |Reader executed |Command Terminated └SQL Connection Terminated [/TestMethod]"
  },
  "api/Debugland.Debugger.html": {
    "href": "api/Debugland.Debugger.html",
    "title": "Class Debugger | Debugland",
    "keywords": "Class Debugger Namespace Debugland Assembly Debugland - Backup.dll This class is used for debugging purposes. public static class Debugger Inheritance object Debugger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CatchBlockInitiated() This Method is used to let you know that a Catch Block has been initiated. [Conditional(\"DEBUG\")] public static void CatchBlockInitiated() CatchBlockTerminated() This Method is used to let you know that a Catch Block has been terminated. [Conditional(\"DEBUG\")] public static void CatchBlockTerminated() Close() Flushes the output buffer and then calls the Close method on each of the Listeners. Basically the same as debug.close(); [Conditional(\"DEBUG\")] public static void Close() DoWhileLoopInitiated() This Method is used to let you know that a Do-while loop has been initiated. [Conditional(\"DEBUG\")] public static void DoWhileLoopInitiated() DoWhileLoopTerminated() This Method is used to let you know that a Do-while loop has been terminated. [Conditional(\"DEBUG\")] public static void DoWhileLoopTerminated() Fail(string, string) This method is used to write a fail message to the debug window. [Conditional(\"DEBUG\")] public static void Fail(string message, string secondMessage) Parameters message string The message which is being written to the debug window. secondMessage string FinallyBlockInitiated() This Method is used to let you know that a Finally Block has been initiated. [Conditional(\"DEBUG\")] public static void FinallyBlockInitiated() FinallyBlockTerminated() This Method is used to let you know that a Finally Block has been terminated. [Conditional(\"DEBUG\")] public static void FinallyBlockTerminated() ForLoopInitiated() This Method is used to let you know that a for loop has been initiated. [Conditional(\"DEBUG\")] public static void ForLoopInitiated() ForLoopTerminated() This Method is used to let you know that a for loop has been terminated. [Conditional(\"DEBUG\")] public static void ForLoopTerminated() IfInitiated() This Method is used to let you know that a If Statement has been initiated. [Conditional(\"DEBUG\")] public static void IfInitiated() IfTerminated() This Method is used to let you know that a If Statement has been terminated. [Conditional(\"DEBUG\")] public static void IfTerminated() Let(bool, string) This method is used to check if a condition is true. If the condition is false, the method will write a message to the debug window. [Conditional(\"DEBUG\")] public static void Let(bool condition, string message) Parameters condition bool The condition which is being checked. message string The message which is being written to the debug window. Message(string) This method is used to write a message to the debug window. [Conditional(\"DEBUG\")] public static void Message(string message) Parameters message string Beskeden som skal skrives til debug vinduet. MessageIf(bool, object) This method is used to write a message to the debug window if a condition is true. [Conditional(\"DEBUG\")] public static void MessageIf(bool condition, object value) Parameters condition bool The conditional expression to evaluate. If the condition is true, the value is written to the trace listeners in the collection. value object An object whose name is sent to the Listeners. MessageIf(bool, object, string) This method is used to write a message to the debug window if a condition is true. [Conditional(\"DEBUG\")] public static void MessageIf(bool condition, object value, string category) Parameters condition bool The condition which is being checked. value object An object whose name is sent to the Listeners. category string A category name used to organize the output. MessageIf(bool, string) This method is used to write a message to the debug window if a condition is true. [Conditional(\"DEBUG\")] public static void MessageIf(bool condition, string message) Parameters condition bool The condition which is being checked. message string The message which is being written to the debug window. MessageIf(bool, string, string) This method is used to write a message to the debug window if a condition is true. [Conditional(\"DEBUG\")] public static void MessageIf(bool condition, string stringMessage, string category) Parameters condition bool The conditional expression to evaluate. If the condition is true, the category name and message are written to the trace listeners in the collection. stringMessage string A message to write. category string MessageImportant(string) This method is used to write an important message to the debug window. [Conditional(\"DEBUG\")] public static void MessageImportant(string message) Parameters message string The message which is being written to the debug window. MethodInitiated(string) This method indicates that the method has started and initiated. Begins the Stopwatch object and writes the name of the method to the debug window. [Conditional(\"DEBUG\")] public static void MethodInitiated(string Name) Parameters Name string MethodTerminated(string) This method indicates that the method has ended. Also stops the Stopwatch object and writes the lifespan of the method to the debug window. [Conditional(\"DEBUG\")] public static void MethodTerminated(string methodName) Parameters methodName string The name of the method which is being called. ReaderInitiated() This Method shows that the SQL Reader has been initiated. [Conditional(\"DEBUG\")] public static void ReaderInitiated() ReaderTerminating() This method is used to debug SQL Commands, it will write the command to the debug window that the Reader has terminated. [Conditional(\"DEBUG\")] public static void ReaderTerminating() SQLCommandInitiated(string) This Method is used to debug SQL Commands, it will write the command to the debug window. This will initate the SQL Connection. [Conditional(\"DEBUG\")] public static void SQLCommandInitiated(string operation) Parameters operation string The SQL Command which is being executed. SQLCommandTerminating() This method is used to debug SQL Commands, it will write the command to the debug window that the SQL Command has terminated. [Conditional(\"DEBUG\")] public static void SQLCommandTerminating() SQLConnectionInitiated() Connects to the SQL Server and the database. This method is used to debug SQL Commands, it will write the command to the debug window that the SQL Connection has been initiated. [Conditional(\"DEBUG\")] public static void SQLConnectionInitiated() SQLConnectionTerminating() This method is used to debug SQL Commands, it will write the command to the debug window that the SQL Connection has terminated. [Conditional(\"DEBUG\")] public static void SQLConnectionTerminating() TimeInitiated(string) This method is used to start the stopwatch and write the elapsed time to the debug window. [Conditional(\"DEBUG\")] public static void TimeInitiated(string methodName) Parameters methodName string The name of the method which is being called. TimeTerminated(string) This method is used to stop the stopwatch and write the elapsed time to the debug window. [Conditional(\"DEBUG\")] public static void TimeTerminated(string methodName) Parameters methodName string The name of the method which is being called. TryBlockInitiated() This Method is used to let you know that a Try Block has been initiated. [Conditional(\"DEBUG\")] public static void TryBlockInitiated() TryBlockTerminated() This Method is used to let you know that a Try Block has been terminated. [Conditional(\"DEBUG\")] public static void TryBlockTerminated() Variable() This Method is used to let you know that multiple Variables has been declared. [Conditional(\"DEBUG\")] public static void Variable() Variable(string) This Method is used to let you know that a Variable has been declared. [Conditional(\"DEBUG\")] public static void Variable(string variableName) Parameters variableName string Name of the variable you declared Variable(string, string) This Method is used to let you know that a Variable has been declared. It also writes the value of the variable. [Conditional(\"DEBUG\")] public static void Variable(string variableName, string variableValue) Parameters variableName string Name of the variable you declared variableValue string Value of the variable you declared WhileLoopInitiated() This Method is used to let you know that a while loop has been initiated. [Conditional(\"DEBUG\")] public static void WhileLoopInitiated() WhileLoopTerminated() This Method is used to let you know that a while loop has been terminated. [Conditional(\"DEBUG\")] public static void WhileLoopTerminated()"
  },
  "api/Debugland.html": {
    "href": "api/Debugland.html",
    "title": "Namespace Debugland | Debugland",
    "keywords": "Namespace Debugland Classes Debugger This class is used for debugging purposes."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started With DebugLand | Debugland",
    "keywords": "Getting Started With DebugLand In the dynamic world of software development, Debugland stands as a beacon, revolutionizing the debugging experience during runtime. Designed to bring clarity and readability to the often intricate process of troubleshooting, Debugland introduces a suite of features that seamlessly integrate into your development workflow. To learn how to set it up please follow the next seciton Setup"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Debugland",
    "keywords": "Introduction"
  },
  "getting-started.html": {
    "href": "getting-started.html",
    "title": "Getting Started | Debugland",
    "keywords": "Getting Started test test test"
  },
  "index.html": {
    "href": "index.html",
    "title": "| Debugland",
    "keywords": ""
  },
  "introduction.html": {
    "href": "introduction.html",
    "title": "Introduction | Debugland",
    "keywords": "Introduction"
  }
}